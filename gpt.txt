🔴App.js:

import { Platform, SafeAreaView, StyleSheet, Text, View, AppState } from 'react-native';
import Titulo from './src/components/Titulo';
import Timer from './src/components/Timer';
import Boton from './src/components/Boton';
import Tabs from './src/components/Tabs';
import { useState, useEffect, useRef } from 'react';
import { Audio } from "expo-av";
import { enviarNotificacion } from './src/utility/notifications';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { registerBackgroundTimer } from './src/utility/backgroundTimer';

export default function App() {
  const duraciones = [5 * 1, 5 * 60, 15 * 60]; // mismo orden que en Tabs
  const colores = ["#93de6b", "#66F2CD", "#D2F266"];

  const [run, setRun] = useState(false);
  const [seleccion, setSeleccion] = useState(0);
  const [tiempo, setTiempo] = useState(duraciones[seleccion]);

  const appState = useRef(AppState.currentState);

  const solicitarPermisosNotificaciones = async () => {
    const { status } = await Notifications.getPermissionsAsync();
    if (status !== "granted") {
      const { status: newStatus } = await Notifications.requestPermissionsAsync();
      if (newStatus !== "granted") {
        console.log("Permiso de notificación denegado");
        return;
      }
    }
    console.log("Permiso de notificación concedido");
  };

  useEffect(() => {
    solicitarPermisosNotificaciones();
    registerBackgroundTimer(); // ← REGISTRO DE BACKGROUND FETCH
  }, []);

  useEffect(() => {
    let intervalo = null;

    if (run) {
      guardarInicioTemporizador();

      intervalo = setInterval(() => {
        setTiempo(prev => {
          if (prev <= 1) {
            clearInterval(intervalo);
            setRun(false);
            reproducirAlarma();
            enviarNotificacion();
            AsyncStorage.removeItem('inicio');
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    } else {
      AsyncStorage.removeItem('inicio');
    }

    return () => clearInterval(intervalo);
  }, [run]);

  // Manejo del estado de la app (foreground / background)
  useEffect(() => {
    const subscription = AppState.addEventListener("change", async nextAppState => {
      if (appState.current.match(/inactive|background/) && nextAppState === "active") {
        const inicioStr = await AsyncStorage.getItem('inicio');
        const notificado = await AsyncStorage.getItem('notificado');

        if (run && inicioStr) {
          const inicio = parseInt(inicioStr);
          const ahora = Date.now();
          const diff = Math.floor((ahora - inicio) / 1000);
          const nuevoTiempo = duraciones[seleccion] - diff;

          if (nuevoTiempo <= 0 && notificado !== 'true') {
            setRun(false);
            setTiempo(0);
            await AsyncStorage.setItem('notificado', 'true');
            enviarNotificacion();
            reproducirAlarma();
          } else {
            setTiempo(nuevoTiempo);
          }
        }
      }

      appState.current = nextAppState;
    });

    return () => subscription.remove();
  }, [run, seleccion]);

  async function guardarInicioTemporizador() {
    const now = Date.now();
    await AsyncStorage.setItem('inicio', now.toString());
    await AsyncStorage.setItem('duracion', duraciones[seleccion].toString());
    await AsyncStorage.removeItem('notificado'); // <- limpiamos el flag
  }

  async function reproducirAlarma() {
    const { sound } = await Audio.Sound.createAsync(
      require('./assets/Sonido/alarma.mp3')
    );
    await sound.playAsync();
  }

  function formatearTiempo(segundos) {
    const minutos = Math.floor(segundos / 60);
    const restoSegundos = segundos % 60;
    return `${minutos < 10 ? '0' : ''}${minutos}:${restoSegundos < 10 ? '0' : ''}${restoSegundos}`;
  }

  return (
    <SafeAreaView style={{ flex: 1 }}>
      <View style={[styles.container, { marginTop: Platform.OS === 'android' ? 25 : 0 }, { backgroundColor: colores[seleccion] }]}>
        <Titulo title={"Pomodoro App"} />
        <Timer tiempo={formatearTiempo(tiempo)} />
        <Boton run={run} setRun={setRun} />
        <Tabs seleccion={seleccion} setSeleccion={index => {
          setSeleccion(index);
          setTiempo(duraciones[index]);
        }} setTiempo={setTiempo} />
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

🔴 notifications.js:

import * as Notifications from "expo-notifications";

// Configurar cómo se comportan las notificaciones en primer y segundo plano
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

// Función para programar una notificación
export const enviarNotificacion = async () => {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: "⏳ Pomodoro Finalizado",
      body: "Tu tiempo ha terminado. ¡Tómate un descanso!",
      sound: true,
    },
    trigger: null, // Se envía de inmediato
  });
};

🔴backgroundTimer.js:

// src/utility/backgroundTimer.js
import * as TaskManager from 'expo-task-manager';
import * as BackgroundFetch from 'expo-background-fetch';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { enviarNotificacion } from './notifications';

const BACKGROUND_FETCH_TASK = "background-fetch-timer-task";

// Define la tarea que se ejecuta en segundo plano
TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  try {
    const inicioStr = await AsyncStorage.getItem('inicio');
    const duracionStr = await AsyncStorage.getItem('duracion');

    if (!inicioStr || !duracionStr) {
      return BackgroundFetch.BackgroundFetchResult.NoData;
    }

    const inicio = parseInt(inicioStr);
    const duracion = parseInt(duracionStr);
    const ahora = Date.now();
    const diff = Math.floor((ahora - inicio) / 1000);
    const notificado = await AsyncStorage.getItem('notificado');

    if (diff >= duracion && notificado !== 'true') {
      await enviarNotificacion();
      await AsyncStorage.setItem('notificado', 'true');
      return BackgroundFetch.BackgroundFetchResult.NewData;
    }

    return BackgroundFetch.BackgroundFetchResult.NoData;
  } catch (error) {
    console.error("Error en background fetch:", error);
    return BackgroundFetch.BackgroundFetchResult.Failed;
  }
});

// 🔧 Esta es la función que faltaba:
export async function registerBackgroundTimer() {
  try {
    const status = await BackgroundFetch.getStatusAsync();
    if (
      status === BackgroundFetch.BackgroundFetchStatus.Restricted ||
      status === BackgroundFetch.BackgroundFetchStatus.Denied
    ) {
      console.log("Permisos de Background Fetch no concedidos");
      return;
    }

    const isTaskDefined = TaskManager.isTaskDefined(BACKGROUND_FETCH_TASK);
    const isRegistered = await BackgroundFetch.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);

    if (!isRegistered && isTaskDefined) {
      await BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
        minimumInterval: 60, // cada 60 segundos
        stopOnTerminate: false,
        startOnBoot: true,
      });
      console.log("✅ Tarea de background registrada");
    }
  } catch (error) {
    console.error("Error al registrar tarea en background:", error);
  }
}

sigue sin funcionar. intenta otro metodo